name: VMware Versions Scraper

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    # Allow manual trigger

permissions:
  contents: write

jobs:
  scrape-vmware-versions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run VMware scraper
      id: run-scraper
      run: |
        python vmware_tools_scraper.py
        echo "exit_code=$?" >> $GITHUB_OUTPUT
        
    - name: Check if scraper succeeded
      if: steps.run-scraper.outputs.exit_code != '0'
      run: |
        echo "❌ VMware scraper failed with exit code ${{ steps.run-scraper.outputs.exit_code }}"
        echo "This might be due to network issues or changes in the VMware website structure."
        echo "The script will continue to use fallback data if available."
        exit 1
        
    - name: Verify output files
      run: |
        if [ ! -f "vmware-versions.json" ]; then
          echo "❌ vmware-versions.json was not created"
          exit 1
        fi
        if [ ! -f "vmware-versions.html" ]; then
          echo "❌ vmware-versions.html was not created"
          exit 1
        fi
        echo "✅ Output files created successfully"
        
    - name: Add last updated date/time to footer
      run: |
        LAST_UPDATED="$(date -u '+%Y-%m-%d %H:%M UTC')"
        FOOTER="<footer style=\"text-align:center;margin-top:2em;font-size:small;color:#888;\">Last updated: $LAST_UPDATED</footer>"
        # Remove any existing last updated footer
        sed -i '/<footer.*Last updated:/d' vmware-versions.html
        # Add the new footer before </body>
        sed -i "s|</body>|$FOOTER\n</body>|" vmware-versions.html
      shell: bash
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -f vmware-versions.json vmware-versions.html
        git diff --quiet && git diff --staged --quiet || git commit -m "Update VMware versions - $(date)"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:${GITHUB_REF}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}